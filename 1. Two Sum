Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution 1.

class Solution {
    public int[] twoSum(int[] nums, int target) {
        //Create a hashmap to store the numbers. The key is the number, and the value is their index
        HashMap<Integer, Integer> indexForNum = new HashMap<>();
        //Start looping the list. If we found that there is a difference of target and current value in the hashmap, we found it.
        //If not, we just put the current value into the hashmap.
        for (int i = 0; i < nums.length; i++) {
            if (indexForNum.containsKey(target - nums[i])) {
                return new int[]{i, indexForNum.get(target - nums[i])};
            } else {
                indexForNum.put(nums[i], i);
            }
        }
        return null;
    }
}

Solution 2

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i+1; j < nums.length; j++) {
                if (nums[j] == target - nums[i]) {
                    return new int[]{i, j};
                }
            }
        }
        return null;
    }
}
